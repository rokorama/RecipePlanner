@page "/recipe/new"
@page "/recipe/{id:guid}/edit"
@inject IRecipeService RecipeService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@attribute [Authorize]

@if (loading)
{
    <span>@msg</span>
}
else
{
    if (!Recipe.IsNew && Recipe.UploadedById != UserId)
    {
        <h3>You are not authorized to edit this recipe.</h3>
        return;
    }
    if (Recipe.Editing)
    {
        <h3>Edit @Recipe.Name</h3>
    }
    else if (Recipe.IsNew)
    { 
        <h3>Create a new recipe</h3>
    }

    <EditForm Model="Recipe" OnValidSubmit="AddOrUpdateRecipe">
        <DataAnnotationsValidator/>
        <MudCard>
            <MudCardContent>
                <MudTextField Label="Name" @bind-Value="Recipe.Name" For="@(() => Recipe.Name)"/>
                <MudTextField Label="Description" Lines="7" @bind-Value="Recipe.Description" For="@(() => Recipe.Description)"/>
                <MudTextField Label="Source" @bind-Value="Recipe.Source" For="@(() => Recipe.Source)" HelperText="If you found this recipe somewhere else, please credit the source"/>
                <MudCheckBox @bind-Checked="@Recipe.Vegetarian" Label="Vegetarian?" />
                <MudCheckBox @bind-Checked="@Recipe.Vegan" Label="Vegan?" />
                <h5>Tags</h5>
                <MudChipSet AllClosable="true" OnClose="RemoveTag">
                    @foreach (var tag in Recipe.Tags)
                    {
                        <MudChip Value="@tag" Text="@tag.Content" />
                    }
                </MudChipSet>
                <MudGrid>
                    <MudItem xs="12" sm="7">
                        <MudTextField Label="Add Tag" Title="Add Tag" @bind-Value="newTagContent" HelperTextOnFocus="true" HelperText="Enter tags to help you and others find this recipe - please keep them as short as possible"/>
                    </MudItem>
                    <MudItem xs="12" sm="2">
                        <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="AddTag" />
                    </MudItem>
                </MudGrid>
                <br />
                <h5>Steps</h5>
                <MudGrid>
                    @foreach (var step in Recipe.Steps)
                    {
                        <MudItem xs="12" sm="7">
                            <MudTextField Label="Add step" @bind-Value="step.Content" />
                        </MudItem>
                        <MudItem xs="12" sm="2">
                            <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="() => AddStep(step)" Title="Add new step below"/>
                        </MudItem>
                        <MudItem xs="12" sm="2">
                            <MudIconButton Icon="@Icons.Material.Filled.Remove" OnClick="() => RemoveStep(step)" Title="Remove this step"/>
                        </MudItem>
                    }
                </MudGrid>
            
                <h5>Ingredients</h5>
                <MudTable Items="@Recipe.Ingredients">
                    <HeaderContent>
                        <MudTh>Ingredient</MudTh>
                        <MudTh>Quantity</MudTh>
                        <MudTh>Measurement</MudTh>
                        <MudTh>Preparation</MudTh>
                        <MudTh>Optional?</MudTh>
                    </HeaderContent>
                    <RowTemplate Context="ingredientContext">
                        <MudTd DataLabel="Name">@ingredientContext.Name</MudTd>
                        <MudTd DataLabel="Quantity">@ingredientContext.Quantity</MudTd>
                        <MudTd DataLabel="Measurement">@ingredientContext.Measurement</MudTd>
                        <MudTd DataLabel="Preparation">@ingredientContext.Preparation</MudTd>
                        <MudTd DataLabel="Optional?">@(ingredientContext.Optional ? "Yes" : "")</MudTd>
                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Filled.Remove" OnClick="() => RemoveIngredient(ingredientContext)" Title="Remove this ingredient"/> 
                        </MudTd>
                    </RowTemplate>
                    <RowEditingTemplate Context="ingredientContext">
                        <MudTd DataLabel="Ingredient">
                            <MudTextField @bind-Value="@ingredientContext.Name" Required/>
                        </MudTd>
                        <MudTd DataLabel="Amount">
                            <MudNumericField @bind-Value="@ingredientContext.Quantity" Required/>
                        </MudTd>
                        <MudTd DataLabel="Unit">
                            <MudTextField @bind-Value="@ingredientContext.Measurement" />
                        </MudTd>
                        <MudTd DataLabel="Preparation">
                            <MudTextField @bind-Value="@ingredientContext.Preparation" />
                        </MudTd>
                        <MudTd DataLabel="Optional?">
                            <MudCheckBox @bind-Checked="@ingredientContext.Optional" />
                        </MudTd>
                    </RowEditingTemplate>
                </MudTable>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="AddIngredient">Add Ingredient</MudButton>
            </MudCardContent> 
        </MudCard>
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">@btnText</MudButton>
        </MudCardActions>   
        <ValidationSummary />
    </EditForm>     

    @if (!Recipe.IsNew)
    {
        <button type="button" class="btn btn-danger float-start" @onclick="DeleteRecipe">
            Delete Recipe
        </button> 
    }
}

@code {
    [Parameter]
    public Guid? Id { get; set; }
    public Guid UserId { get; set; }

    Recipe Recipe = new();
    string newTagContent = string.Empty;
    string newStepContent = string.Empty;
    bool loading = true;
    string btnText = string.Empty;
    string msg = "Loading...";

    protected override async Task OnInitializedAsync()
    {
        UserId = await AuthService.GetUserId();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Id is null)
        {
            Recipe = new Recipe()
            {
                Id = Guid.NewGuid(),
                UploadedById = UserId,
                Steps = new List<RecipeStep> { new RecipeStep { Id = Guid.NewGuid(), Index = 0, RecipeId = Recipe.Id }},
                Ingredients = new List<RecipeIngredient> { new RecipeIngredient { Id = Guid.NewGuid(), RecipeId = Recipe.Id }},
                IsNew = true
            };
            btnText = "Create Recipe";
        }
        else
        {
            Recipe dbRecipe = (await RecipeService.GetRecipe(Id ?? Guid.Empty)).Data!;
            if (dbRecipe is null)
            {
                msg = $"Recipe with id {Id} could not be found.";
                return;
            }
            Recipe = dbRecipe;
            Recipe.Editing = true;
            btnText = "Update Recipe";
        }
        loading = false;
    }

    async Task AddOrUpdateRecipe()
    {
        if (Recipe.IsNew)
        {
            var result = await RecipeService.CreateRecipe(Recipe);
            NavigationManager.NavigateTo($"recipe/{result.Id}");
        }
        else
        {
            Recipe = await RecipeService.UpdateRecipe(Recipe);
            NavigationManager.NavigateTo($"recipe/{Recipe.Id}", true);
        }
    }

    async Task DeleteRecipe()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Do you really want to delete {Recipe.Name}?");
        if (confirmed)
        {
            await RecipeService.DeleteRecipe(Recipe);
            NavigationManager.NavigateTo("admin/recipes");
        }
    }

    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        var image = e.File;
        var resizedImage = await image.RequestImageFileAsync(format, 300, 300);
        var buffer = new byte[resizedImage.Size];
        await resizedImage.OpenReadStream().ReadAsync(buffer);
        var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        Recipe.Image = new Image { Data = imageData };
    }

    void RemoveImage()
    {
        Recipe.Image = null;
    }

    void AddTag()
    {
        if (!string.IsNullOrEmpty(newTagContent))
        {
            Recipe.Tags.Add(new RecipeTag { Id = Guid.NewGuid(), Content = newTagContent, RecipeId = Recipe.Id });
            newTagContent = string.Empty;
        }
    }

    void RemoveTag(MudChip chip)
    {
        Recipe.Tags.Remove((RecipeTag)chip.Value);
    }

    void AddStep(RecipeStep step)
    {
        foreach (var subsequentStep in Recipe.Steps.Where(s => s.Index > step.Index))
        {
            subsequentStep.Index++;
            Console.WriteLine($"Text: {subsequentStep.Content} - Index: {subsequentStep.Index}");
            
        }
        var newStep = new RecipeStep { Id = Guid.NewGuid(), Index = step.Index + 1, RecipeId = Recipe.Id };
        Recipe.Steps.Insert(step.Index + 1, newStep);
        Console.WriteLine($"Text: {newStep.Content} - Index: {newStep.Index}");
    }

    void RemoveStep(RecipeStep step)
    {
        Recipe.Steps.Remove(step);
        foreach (var subsequentStep in Recipe.Steps.Where(s => s.Index > step.Index))
        {
            subsequentStep.Index--;
        }
    }

    void AddIngredient()
    {
        Recipe.Ingredients.Add(new RecipeIngredient { Id = Guid.NewGuid(), RecipeId = Recipe.Id });
    }

    void RemoveIngredient(RecipeIngredient ingredient)
    {
        Recipe.Ingredients.Remove(ingredient);
    }
}