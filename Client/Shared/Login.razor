@page "/login"
@using Microsoft.AspNetCore.WebUtilities
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILocalStorageService LocalStorage

<PageTitle>Login</PageTitle>

<h3>Login</h3>

<EditForm Model="User" @bind-IsValid="@success" OnValidSubmit="HandleLogin">
<DataAnnotationsValidator />
    <MudCard>
        <MudCardContent>
            <MudTextField Label="Email" @bind-Value="User.Email" For="@(() => User.Email)"></MudTextField>
            <MudTextField Label="Password" Class="mt-3"
                            @bind-Value="User.Password" For="@(() => User.Password)" InputType="InputType.Password"/>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" ButtonType="ButtonType.Submit" Color="Color.Primary" Class="ml-auto">Login</MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>

@code {
    private UserLogin User { get; set; } = new UserLogin();
    private bool success = false;
    private string errorMessage = string.Empty;
    private string returnUrl = string.Empty;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url!;
        }
    }

    private async Task HandleLogin()
    {
        var result = await AuthService.Login(User);
        if (result.Success)
        {
            errorMessage = string.Empty;
            await LocalStorage.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            NavigationManager.NavigateTo(returnUrl);
        }
    }
}