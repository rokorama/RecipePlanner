@page "/register"
@inject IAuthService AuthService

<PageTitle>Registration</PageTitle>

<h3>Register</h3>

<EditForm Model="User" OnValidSubmit="HandleRegistration">
    <DataAnnotationsValidator />
    <MudItem xs="12" sm="7">
        <MudCard>
            <MudCardContent>
                <MudTextField Label="Username"
                              @bind-Value="User.Name" For="@(() => User.Name)"/>
                <MudTextField Label="Email" Class="mt-3"
                              @bind-Value="User.Email" For="@(() => User.Email)"/>
                <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                              @bind-Value="User.Password" For="@(() => User.Password)" InputType="InputType.Password"/>
                <MudTextField Label="Confirm password" HelperText="Repeat the password" Class="mt-3"
                              @bind-Value="User.ConfirmPassword" For="@(() => User.ConfirmPassword)" InputType="InputType.Password"/>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
            @if (success)
            {
                <MudText Color="Color.Success">Success</MudText>
            }
            else
            {
                <MudText Color="@Color.Error">
                    <ValidationSummary />
                </MudText>
            }
        </MudPaper>
    </MudItem>
</EditForm>

@code {
    UserRegister User = new();

    bool success = false;
    string message = string.Empty;
    string messageCssClass = string.Empty;


    async Task OnValidSubmit(EditContext context)
    {
        success = true;
        var result = await AuthService.Register(User);
        message = result.Message!;
        if (result.Success)
            messageCssClass = "text-success";
        else
            messageCssClass = "text-danger";
        StateHasChanged();
    }

    async Task HandleRegistration()
    {
        var result = await AuthService.Register(User);
        message = result.Message!;
        if (result.Success)
            messageCssClass = "text-success";
        else
            messageCssClass = "text-danger";
    }
}